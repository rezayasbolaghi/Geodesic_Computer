File "Run.m":

	clc;
	clear;

	addpath('Surface');

	P = input('Enter surface name: ','s');
	O = input('Enter order of Adamsâ€“Moulton solver: ');
	Step = input('Enter number of steps: ');
	Dlta = input('Enter step size: ');

	switch P
		case 'Sphere'
			Func = @SphereD;
			Surf = @SphereS;
		case 'Ellipse'
			Func = @EllipseD;
			Surf = @EllipseS;
		case 'Cylinder'
			Func = @CylinderD;
			Surf = @CylinderS;
		case 'Saddle'
			Func = @SaddleD;
			Surf = @SaddleS;
	end

	Data = zeros(Step + 1,4);

	Data(1,1) = input('Enter initial condition "Alpha": ');
	Data(1,2) = input('Enter initial condition "Beta" : ');
	Data(1,3) = input('Enter initial condition "a"    : ');
	Data(1,4) = input('Enter initial condition "b"    : ');

	for i = 1:Step
		if(i <= O)
			N = i;
			Cons = Adams(i);
		end
		Data(i + 1,:) = AdamsMoulton(Func,Cons,Dlta,Data(i + 1 - N : i,:));
	end

	figure;
		XYZ = Surf(Data(1:Step,1),Data(1:Step,2));
		plot3(XYZ(:,1),XYZ(:,2),XYZ(:,3));

File "Adams.m":

	function Cons = Adams(Ordr)

	Cons = zeros(Ordr + 1,2);
	syms u v;

	% Adams-Bashforth
	for j = 0:Ordr - 1
		v = 1 / (u + j);
		for i = 0:Ordr - 1
				v = v * (u + i);
		end
		Cons(Ordr - j,1) = (-1) ^ j / factorial(j) / factorial(Ordr - j - 1) * double(int(v, u, 0, 1));
	end

	% Adams-Moulton
	for j = 0:Ordr
		v = 1 / (u + j - 1);
		for i = 0:Ordr
				v = v * (u + i - 1);
		end
		Cons(Ordr - j + 1,2) = (-1) ^ j / factorial(j) / factorial(Ordr - j) * double(int(v, u, 0, 1));
	end

	end

File "AdamsBashforth.m":

	function Y = AdamsBashforth(Func,Cons,h,X)

	Ordr = size(X,1);
	Y = X(Ordr,:);
	for i = 1:Ordr
		Y = Y + h * Cons(i,1) * Func(X(i,:));
	end

	end

File "AdamsMoulton.m":

	function Y = AdamsMoulton(Func,Cons,h,X)

	Ordr = size(X,1);
	Z = AdamsBashforth(Func,Cons,h,X);
	Conv = 1;
	while(Conv > 1e-10)
		Y = X(Ordr,:) + h * Cons(Ordr + 1,2) * Z;
		for i = 1:Ordr
			Y = Y + h * Cons(i,2) * Func(X(i,:));
		end
		Conv = (norm(Y) - norm(Z)) / norm(Y); Z = Y;
	end

	end

File "Surface\SphereS.m":

	function XYZ = SphereS(U,V)

	XYZ = [U, V, sqrt(1 - U .* U - V .* V)];

	end

File "Surface\SphereD.m":

	function Y = SphereD(X)

	A = 1 - X(1)^2;
	B = 1 - X(2)^2;
	D = A + B - 1;

	A = A / D;
	B = B / D;
	C = (2 * X(1) * X(2)) / D;

	L = X(3) * X(3);
	M = X(3) * X(4);
	N = X(4) * X(4);

	Y(1) = X(3);
	Y(2) = X(4);
	Y(3) = X(1) * ( B * L - C * M - A * N);
	Y(4) = X(2) * (-B * L - C * M + A * N);
		
	end

File "Surface\EllipseS.m":

	function XYZ = EllipseS(U,V)

	XYZ = [U, V, sqrt(1 - U .* U - V .* V / 4)];

	end

File "Surface\EllipseD.m":

	function Y = EllipseD(X)

	A = X(1)^2;
	B = X(2)^2;
	C = 1 - A - B / 4;
	D = C * (16 * (C + A) + B);

	A = (1 - A) / D;
	B = (1 - B / 4) / D;
	C = (X(1) * X(2)) / D;

	L = X(3) * X(3);
	M = X(3) * X(4);
	N = X(4) * X(4);

	Y(1) = X(3);
	Y(2) = X(4);
	Y(3) = X(1) * (-16 * B * L - 8 * C * M - 4 * A * N);
	Y(4) = X(2) * (- 4 * B * L - 2 * C * M -     A * N);
			
	end

File "Surface\CylinderS.m":

	function XYZ = CylinderS(U,V)

	XYZ = [sin(U), cos(U), V];

	end

File "Surface\CylinderD.m":

	function Y = CylinderD(X)

	Y(1) = X(3);
	Y(2) = X(4);
	Y(3) = 0;
	Y(4) = 0;
		
	end

File "Surface\SaddleS.m":

	function XYZ = SaddleS(U,V)

	XYZ = [U, V, U .^ 3 - 3 * U .* V .^ 2];

	end

File "Surface\SaddleD.m":

	function Y = SaddleD(X)

	Al = X(1);
	Bt = X(2);

	Al2 = X(1) * X(1);
	Bt2 = X(2) * X(2);

	TA = Al2 - Bt2;
	TB = 1 + 36 * Al2 * Bt2;
	TC = 1 + 9 * TA ^ 2;

	A1 = 648 * Al * Bt2 * TA * TA;
	B1 = - 36 * TA;
	C1 = Al * (  36 * TB * (3 * Bt2 - Al2) ...
			   - 72 * Bt2 * TB ...
			   + 1296 * Al2 * Bt2 * TA);

	A2 = Bt * (  36 * TC * (Bt2 - 3 * Al2) ...
			   + 36 * TA * TC ...
			   + 648 * Al2 * TA * TA);
	B2 = 72 * Al * Bt2;
	C2 = Bt * (  72 * Al2 * TC ...
			   + 648 * Al2 * TA * (3 * Bt2 - Al2) ...
			   - 1296 * Al2 * Bt2 * TA);

	H = - 2 * TC;

	L = X(3) * X(3);
	M = X(3) * X(4);
	N = X(4) * X(4);

	Y(1) = X(3);
	Y(2) = X(4);
	Y(3) = X(1) * (A1 * L + B1 * M + C1 * N) / H;
	Y(4) = X(2) * (A2 * L + B2 * M + C2 * N) / H;
			
	end